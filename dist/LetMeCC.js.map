{"version":3,"sources":["webpack:///./src/tracker/index.ts","webpack:///./src/globel/data.ts","webpack:///./src/LetMeCC.ts"],"names":["Tracker","name","options","globelData","this","_name","_options","_globelData","prototype","track","eventName","params","reset","LetMeCCInstance","LetMeCC","init","_tracks","Error","window","functionName","args","_i","arguments","length","apply","e","console","log"],"mappings":"mBAAA,IAAIA,EAAyB,WACzB,SAASA,EAAQC,EAAMC,EAASC,GAC5BC,KAAKC,MAAQJ,EACbG,KAAKE,SAAWJ,EAChBE,KAAKG,YAAcJ,EAKvB,OAFAH,EAAQQ,UAAUC,MAAQ,SAAUC,EAAWC,KAExCX,EATiB,GCAxBG,EAA4B,WAC5B,SAASA,KAKT,OAFAA,EAAWK,UAAUI,MAAQ,aAEtBT,EANoB,GCyB3BU,EAAkB,IAvBO,WACzB,SAASC,IACLV,KAAKG,YAAc,IAAIJ,EAmB3B,OAhBAW,EAAQN,UAAUO,KAAO,SAAUd,EAAMC,GACrCE,KAAKY,QAAQf,GAAQ,IAAID,EAAQC,EAAMC,EAASE,KAAKG,cAGzDO,EAAQN,UAAUC,MAAQ,SAAUR,EAAMS,EAAWC,GACjD,IAAIP,KAAKY,QAAQf,GAIb,MAAM,IAAIgB,MAAM,WAAahB,EAAO,mBAHpCG,KAAKY,QAAQf,GAAMQ,MAAMC,EAAWC,IAO5CG,EAAQN,UAAUI,MAAQ,WACtBR,KAAKG,aAAeH,KAAKG,YAAmB,SAEzCO,EArBiB,IAwB5BI,OAAOJ,QAAU,SAAUK,GAEvB,IADA,IAAIC,EAAO,GACFC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,GAE7B,IACIR,EAAgBM,GAAcK,MAAMX,EAAiBO,GAEzD,MAAOK,GACHC,QAAQC,IAAIF,M","file":"LetMeCC.js","sourcesContent":["var Tracker = /** @class */ (function () {\r\n    function Tracker(name, options, globelData) {\r\n        this._name = name;\r\n        this._options = options;\r\n        this._globelData = globelData;\r\n    }\r\n    ;\r\n    Tracker.prototype.track = function (eventName, params) {\r\n    };\r\n    return Tracker;\r\n}());\r\nexport { Tracker };\r\n","var globelData = /** @class */ (function () {\r\n    function globelData() {\r\n    }\r\n    ;\r\n    globelData.prototype.reset = function () {\r\n    };\r\n    return globelData;\r\n}());\r\nexport { globelData };\r\n","import { Tracker } from './tracker/index';\r\nimport { globelData } from './globel/data';\r\nvar LetMeCC = /** @class */ (function () {\r\n    function LetMeCC() {\r\n        this._globelData = new globelData();\r\n    }\r\n    ;\r\n    LetMeCC.prototype.init = function (name, options) {\r\n        this._tracks[name] = new Tracker(name, options, this._globelData);\r\n    };\r\n    ;\r\n    LetMeCC.prototype.track = function (name, eventName, params) {\r\n        if (this._tracks[name]) {\r\n            this._tracks[name].track(eventName, params);\r\n        }\r\n        else {\r\n            throw new Error(\"Tracker \" + name + \" does not exist\");\r\n        }\r\n    };\r\n    ;\r\n    LetMeCC.prototype.reset = function () {\r\n        this._globelData && this._globelData['reset']();\r\n    };\r\n    return LetMeCC;\r\n}());\r\nvar LetMeCCInstance = new LetMeCC();\r\nwindow.LetMeCC = function (functionName) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    try {\r\n        LetMeCCInstance[functionName].apply(LetMeCCInstance, args);\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n"],"sourceRoot":""}